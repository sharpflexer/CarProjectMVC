// <auto-generated />
using System;
using CarProjectMVC.Areas.Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CarProjectMVC.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20231018144912_DropCarColorCarModel")]
    partial class DropCarColorCarModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CarColorCarModel", b =>
                {
                    b.Property<int>("ColorsId")
                        .HasColumnType("integer");

                    b.Property<int>("ModelsId")
                        .HasColumnType("integer");

                    b.HasKey("ColorsId", "ModelsId");

                    b.HasIndex("ModelsId");

                    b.ToTable("CarColorCarModel");
                });

            modelBuilder.Entity("CarProjectMVC.Areas.Identity.Data.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanCreate")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanManageUsers")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanRead")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanUpdate")
                        .HasColumnType("boolean");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CanCreate = true,
                            CanDelete = true,
                            CanManageUsers = true,
                            CanRead = true,
                            CanUpdate = true,
                            Name = "Админ"
                        },
                        new
                        {
                            Id = 2,
                            CanCreate = true,
                            CanDelete = true,
                            CanManageUsers = false,
                            CanRead = true,
                            CanUpdate = true,
                            Name = "Менеджер"
                        },
                        new
                        {
                            Id = 3,
                            CanCreate = false,
                            CanDelete = false,
                            CanManageUsers = false,
                            CanRead = true,
                            CanUpdate = false,
                            Name = "Пользователь"
                        });
                });

            modelBuilder.Entity("CarProjectMVC.Areas.Identity.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11324145-5bd9-4f04-a385-5f78199d9664",
                            Email = "admin456@mail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Login = "admin",
                            Password = "admin123",
                            PhoneNumberConfirmed = false,
                            RoleId = 1,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "685f8e70-3636-438c-a718-968bba455296",
                            Email = "manager456@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Login = "manager",
                            Password = "manager123",
                            PhoneNumberConfirmed = false,
                            RoleId = 2,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "96247cd7-e9c4-4ad7-aa3d-1063ee4e3d40",
                            Email = "user456@yandex.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Login = "user",
                            Password = "user123",
                            PhoneNumberConfirmed = false,
                            RoleId = 3,
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("CarProjectMVC.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Audi"
                        },
                        new
                        {
                            Id = 2,
                            Name = "BMW"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mercedes-Benz"
                        });
                });

            modelBuilder.Entity("CarProjectMVC.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<int>("ColorId")
                        .HasColumnType("integer");

                    b.Property<int>("ModelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ColorId");

                    b.HasIndex("ModelId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            ColorId = 3,
                            ModelId = 3
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 2,
                            ColorId = 5,
                            ModelId = 5
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 3,
                            ColorId = 4,
                            ModelId = 8
                        });
                });

            modelBuilder.Entity("CarProjectMVC.Models.CarColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Red"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Blue"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Green"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Yellow"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Gray"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Black"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Dark Blue"
                        },
                        new
                        {
                            Id = 8,
                            Name = "White"
                        });
                });

            modelBuilder.Entity("CarProjectMVC.Models.CarModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Models");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            Name = "A3"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            Name = "A5"
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 1,
                            Name = "A6"
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 2,
                            Name = "X3"
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 2,
                            Name = "X5"
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 2,
                            Name = "X6"
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 3,
                            Name = "GLC"
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 3,
                            Name = "GLB"
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 3,
                            Name = "GLE"
                        });
                });

            modelBuilder.Entity("CarProjectMVC.Models.CarModelCarColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ColorId")
                        .HasColumnType("integer");

                    b.Property<int>("ModelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CarModelCarColor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorId = 1,
                            ModelId = 1
                        },
                        new
                        {
                            Id = 2,
                            ColorId = 2,
                            ModelId = 1
                        },
                        new
                        {
                            Id = 3,
                            ColorId = 3,
                            ModelId = 1
                        },
                        new
                        {
                            Id = 4,
                            ColorId = 2,
                            ModelId = 2
                        },
                        new
                        {
                            Id = 5,
                            ColorId = 3,
                            ModelId = 2
                        },
                        new
                        {
                            Id = 6,
                            ColorId = 4,
                            ModelId = 2
                        },
                        new
                        {
                            Id = 7,
                            ColorId = 3,
                            ModelId = 3
                        },
                        new
                        {
                            Id = 8,
                            ColorId = 4,
                            ModelId = 3
                        },
                        new
                        {
                            Id = 9,
                            ColorId = 5,
                            ModelId = 3
                        },
                        new
                        {
                            Id = 10,
                            ColorId = 1,
                            ModelId = 4
                        },
                        new
                        {
                            Id = 11,
                            ColorId = 7,
                            ModelId = 4
                        },
                        new
                        {
                            Id = 12,
                            ColorId = 3,
                            ModelId = 4
                        },
                        new
                        {
                            Id = 13,
                            ColorId = 4,
                            ModelId = 5
                        },
                        new
                        {
                            Id = 14,
                            ColorId = 5,
                            ModelId = 5
                        },
                        new
                        {
                            Id = 15,
                            ColorId = 7,
                            ModelId = 5
                        },
                        new
                        {
                            Id = 16,
                            ColorId = 5,
                            ModelId = 6
                        },
                        new
                        {
                            Id = 17,
                            ColorId = 7,
                            ModelId = 6
                        },
                        new
                        {
                            Id = 18,
                            ColorId = 8,
                            ModelId = 6
                        },
                        new
                        {
                            Id = 19,
                            ColorId = 6,
                            ModelId = 7
                        },
                        new
                        {
                            Id = 20,
                            ColorId = 1,
                            ModelId = 7
                        },
                        new
                        {
                            Id = 21,
                            ColorId = 4,
                            ModelId = 7
                        },
                        new
                        {
                            Id = 22,
                            ColorId = 2,
                            ModelId = 8
                        },
                        new
                        {
                            Id = 23,
                            ColorId = 4,
                            ModelId = 8
                        },
                        new
                        {
                            Id = 24,
                            ColorId = 6,
                            ModelId = 8
                        },
                        new
                        {
                            Id = 25,
                            ColorId = 5,
                            ModelId = 9
                        },
                        new
                        {
                            Id = 26,
                            ColorId = 6,
                            ModelId = 9
                        },
                        new
                        {
                            Id = 27,
                            ColorId = 7,
                            ModelId = 9
                        });
                });

            modelBuilder.Entity("CarColorCarModel", b =>
                {
                    b.HasOne("CarProjectMVC.Models.CarColor", null)
                        .WithMany()
                        .HasForeignKey("ColorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarProjectMVC.Models.CarModel", null)
                        .WithMany()
                        .HasForeignKey("ModelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarProjectMVC.Areas.Identity.Data.User", b =>
                {
                    b.HasOne("CarProjectMVC.Areas.Identity.Data.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CarProjectMVC.Models.Car", b =>
                {
                    b.HasOne("CarProjectMVC.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarProjectMVC.Models.CarColor", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarProjectMVC.Models.CarModel", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Color");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("CarProjectMVC.Models.CarModel", b =>
                {
                    b.HasOne("CarProjectMVC.Models.Brand", null)
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarProjectMVC.Models.Brand", b =>
                {
                    b.Navigation("Models");
                });
#pragma warning restore 612, 618
        }
    }
}
